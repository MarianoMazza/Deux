<?php
/**
 * Created by PhpStorm.
 * User: alephzero
 * Date: 22/05/16
 * Time: 20:50
 */

namespace AppBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\Validator\Constraints\UserPassword;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * @ORM\Entity()
 * @ORM\Table(name="usuarios")
 */
class Usuario implements UserInterface, \Serializable
{
    /**
     * @ORM\Column(type="integer")
     * @ORM\Id()
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;
    /**
     * @ORM\Column(type="string", unique=true, length=10)
     * @Assert\NotBlank()
     */
    private $username;
    /**
     * @ORM\Column(type="string", length=10)
     * @Assert\NotBlank()
     */
    private $password;
    /**
     * @ORM\Column(type="string", length=30)
     */
    private $pregunta;
    /**
     * @ORM\Column(type="string", length=15)
     */
    private $respuesta;
    /**
     * @ORM\Column(type="integer")
     * @Assert\Choice({1,2,3})
     */
    private $rol;
    /**
     * @ORM\Column(type="date")
     * @Assert\Date()
     */
    private $fechaDeNacimiento;
    /**
     * @ORM\Column(type="integer")
     * @Assert\GreaterThanOrEqual(18)
     * @Assert\LessThan(100)
     */
    private $edad;
    /**
     * @ORM\Column(type="string")
     * @Assert\Country()
     */
    private $pais;
    /**
     * @ORM\Column(type="string")
     * @Assert\Locale()
     */
    private $provincia;
    /**
     * @ORM\Column(type="string", length=20)
     */
    private $localidad;
    /**
     * @ORM\Column(type="string", length=20)
     */
    private $calle;
    /**
     * @ORM\OneToMany(targetEntity="AppBundle\Entity\CalificacionPublicacion", mappedBy="usuario")
     */
    private $publicaciones;
    /**
     * @ORM\OneToMany(targetEntity="AppBundle\Entity\CalificacionUsuario", mappedBy="paraUsuario")
     */
    private $calificaciones;
    /**
     * @ORM\OneToMany(targetEntity="AppBundle\Entity\CalificacionUsuario", mappedBy="deUsuario")
     */
    private $misCalificacionesAUsuarios;
    /**
     * @ORM\OneToMany(targetEntity="AppBundle\Entity\CalificacionPublicacion", mappedBy="deUsuario")
     */
    private $misCalificacionesAPublicaciones;
    /**
     * @ORM\OneToMany(targetEntity="AppBundle\Entity\Comentario", mappedBy="deUsuario")
     */
    private $misComentarios;
    /**
     * @ORM\OneToMany(targetEntity="AppBundle\Entity\Pago", mappedBy="usuario")
     */
    private $pagos;
    /**
     * @ORM\Column(name="is_active", type="boolean")
     */
    private $isActive;
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->publicaciones = new \Doctrine\Common\Collections\ArrayCollection();
        $this->calificaciones = new \Doctrine\Common\Collections\ArrayCollection();
        $this->misCalificacionesAUsuarios = new \Doctrine\Common\Collections\ArrayCollection();
        $this->misCalificacionesAPublicaciones = new \Doctrine\Common\Collections\ArrayCollection();
        $this->misComentarios = new \Doctrine\Common\Collections\ArrayCollection();
        $this->pagos = new \Doctrine\Common\Collections\ArrayCollection();
        $this->isActive = true;
    }

    public function getUsername()
    {
        return $this->username;
    }

    public function getSalt()
    {
        return null;
    }

    public function getPassword()
    {
        return $this->password;
    }


    public function getRoles()
    {
        return array('ROLE_USER');
    }

    public function eraseCredentials()
    {
    }

    /** @see \Serializable::serialize() */
    public function serialize()
    {
        return serialize(array(
            $this->id,
            $this->username,
            $this->password,
        ));
    }

    /** @see \Serializable::unserialize() */
    public function unserialize($serialized)
    {
        list (
            $this->id,
            $this->username,
            $this->password,
            ) = unserialize($serialized);
    }
}
